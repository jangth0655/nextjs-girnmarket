// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures =["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}
 

model User { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email String @unique
  username String @unique
  avatar String?
  tokens Token[]
  products Product[]
  reviews Review[]
  records Record[]
  posts Post[]
  comments Comment[]
  likeComments LikeCommnet[]
}

model Token {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  payload Int @unique
}

model Product { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  price String
  name String
  description String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  purchases Product[] @relation("ProductRelation")
  sales Product[] @relation("ProductRelation")
  photos Photo[]
  reviews Review[]
  records Record[]
}

model Photo { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int 
}

model Review { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  review String @db.MediumText
  score Int @default(1)
}

model Record { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

enum Kind { 
  Fav
  FavList
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  question String @db.MediumText 
  comments Comment[]
  likeComments LikeCommnet[]
  image String
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  answer String @db.MediumText
}

model LikeCommnet { 
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}